//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
   : TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button1Click(TObject *Sender)
{
   if (qtok->Text.ToInt() > 0) {
      token->RowCount=qtok->Text.ToInt();
   }
   else {
      ShowMessage("Quantidade mínima deve ser 1!");
   }
   if (qfun->Text.ToInt() > 0) {
      func->RowCount=qfun->Text.ToInt();
   }
   else {
      ShowMessage("Quantidade mínima deve ser 1!");
   }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button2Click(TObject *Sender)
{
   for (int i=0;i<token->RowCount;i++){
      token->Cells[0][i]="";
   }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button3Click(TObject *Sender)
{
   for (int i=0;i<func->RowCount;i++){
      func->Cells[0][i]="";
   }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button4Click(TObject *Sender)
{
   tabela->RowCount=token->RowCount+2;
   tabela->ColCount=token->RowCount+2;
   tabela->FixedCols=1;
   tabela->FixedRows=1;
   for (int i=1;i<tabela->RowCount;i++){
      tabela->Cells[0][i]=token->Cells[0][i-1];
      tabela->Cells[i][0]=token->Cells[0][i-1];
   }
   tabela->Cells[tabela->ColCount-1][0]="$";
   tabela->Cells[0][tabela->RowCount-1]="$";
   for (int i=1;i<=tabela->RowCount;i++){
      for (int j=1;j<=tabela->ColCount;j++){
         tabela->Cells[j][i]="";
      }
   }
   tabela->Visible=true;
   tabela->Cells[1][2]="<";
   tabela->Cells[1][3]="<";
   tabela->Cells[1][4]="<";
   tabela->Cells[1][6]="<";
   tabela->Cells[2][1]=">";
   tabela->Cells[2][2]=">";
   tabela->Cells[2][3]=">";
   tabela->Cells[2][4]="<";
   tabela->Cells[2][5]=">";
   tabela->Cells[2][6]="<";
   tabela->Cells[3][1]=">";
   tabela->Cells[3][2]="<";
   tabela->Cells[3][3]=">";
   tabela->Cells[3][4]="<";
   tabela->Cells[3][5]=">";
   tabela->Cells[3][6]="<";
   tabela->Cells[4][2]="<";
   tabela->Cells[4][3]="<";
   tabela->Cells[4][4]="<";
   tabela->Cells[4][6]="<";
   tabela->Cells[5][1]=">";
   tabela->Cells[5][2]=">";
   tabela->Cells[5][3]=">";
   tabela->Cells[5][4]="=";
   tabela->Cells[5][6]="<";
   tabela->Cells[6][1]=">";
   tabela->Cells[6][2]=">";
   tabela->Cells[6][3]=">";
   tabela->Cells[6][5]=">";
   tabela->Cells[6][6]="@";
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button5Click(TObject *Sender)
{
   bool continua;
   for(int i=0;i<proc->RowCount;i++){
      for (int j=0;j<proc->ColCount;j++) {
         proc->Cells[j][i]="";
      }
   }
   proc->Cells[0][0]="Pilha";
   proc->Cells[1][0]="Relação";
   proc->Cells[2][0]="Entrada";
   proc->Cells[3][0]="Ação";
   continua=true;
   analise=exp->Text+"$";
   pilha="$";
   for(int i=1;continua;i++){
      proc->RowCount=i+1;
//      ShowMessage("Loop");
      AnsiString tvp,tva;
      proc->Cells[0][i]=pilha;
      proc->Cells[2][i]=analise;
/*      if (pilha == "$") {
         tvp="$";
         if (analise == "$") {
            proc->Cells[2][i]="Sentença Aceita!";
            continua=false;
            break;
         }
      }
      else {*/
         tva="";
         for (int j=0;j<token->RowCount;j++){ // Determinacao do token da vez na pilha (tvp) e token da vez na analise (tva)
            int tam_token,tam_pilha,tam_analise;
            tam_token=token->Cells[0][j].Length();
            tam_pilha=pilha.Length();
            tam_analise=analise.Length();
//            if (pilha.SubString(tam_pilha-tam_token+1,tam_token) == token->Cells[0][j]) {
//               tvp=token->Cells[0][j];
//               ShowMessage("Achei um token!!!"+tvp);
//            }
            if (analise.SubString(1,tam_token) == token->Cells[0][j]) {
               tva=token->Cells[0][j];
//               ShowMessage("Achei um token na analise!!!"+tva);
            }
         }
         AnsiString sub_busca;
         int n;
         for (n=pilha.Length();n>1;n=n-1){
            if (pilha.SubString(n,1) == "<") {
               break;
            }
         }
//         ShowMessage(n);
         if (n > 1)  {
            sub_busca=pilha.SubString(n+1,pilha.Length()-n);
//            ShowMessage(sub_busca);
            for (int l=1;l<=tabela->RowCount;l++) {
               if (sub_busca.Pos(tabela->Cells[0][l])) {
                  tvp=tabela->Cells[0][l];
               }
            }
         }
         else { tvp="$"; }
         if (tva == "") { tva=analise; }
         //Busca na tabela...
//         ShowMessage("Busca tabela por: Entrada "+tva+", pilha "+tvp);
         int r,w;
         for (r=1;r<tabela->RowCount;r++){
            if (tabela->Cells[0][r] == tvp) {
               break;
            }
         }
         for (w=1;w<tabela->ColCount;w++){
            if (tabela->Cells[w][0] == tva) {
               break;
            }
         }
         relacao=tabela->Cells[w][r];
         proc->Cells[1][i]=relacao;
         if (relacao == ">") {
            bool achei_regra=false;
            for (int l=1;l<=func->RowCount;l++) {
               if (sub_busca == func->Cells[1][l]) {
                  proc->Cells[3][i]="Reduz "+func->Cells[0][l]+"=>"+func->Cells[1][l];
                  pilha=pilha.SubString(1,pilha.Length()-sub_busca.Length()-1);
                  pilha=pilha+func->Cells[0][l];
                  achei_regra=true;
                  break;
               }
            }
            if (!achei_regra) {
               proc->Cells[3][i]="Erro na reducao, nao encontrado regra: "+sub_busca;
               continua=false;
            }
         }
         else {
            if (relacao == "<") {
               proc->Cells[3][i]="Empilha "+tva;
               bool achei_term=false;
               for (int j=1;j<=tabela->RowCount;j++){
                  if (pilha.SubString(pilha.Length()-tabela->Cells[0][j].Length(),tabela->Cells[0][j].Length()) == tabela->Cells[0][j]) {
                     ShowMessage("Eu achei: "+tabela->Cells[0][j]);
                     achei_term=true;
                  }
               }
               if (achei_term) {
                  ShowMessage("Eu boto na frente");
                  pilha=pilha+relacao+tva;
               }
               else {
                  ShowMessage("Eu boto atras");
                  pilha=pilha.SubString(1,pilha.Length()-1)+relacao+pilha.SubString(pilha.Length(),1)+tva;
               }
               for (int l=1;l<=tabela->RowCount;l++) {
                  if (sub_busca.Pos(tabela->Cells[0][l])) {
                     tvp=tabela->Cells[0][l];
                  }
               }
               analise=analise.SubString(tva.Length()+1,analise.Length()-tva.Length());
            }
            else {
               if (relacao == "=") {
                  proc->Cells[3][i]="Empilha "+tva;
                  pilha=pilha+tva;
                  analise=analise.SubString(tva.Length()+1,analise.Length()-tva.Length());
               }
               else {
                  if (relacao == aceito->Text) {
                     proc->Cells[3][i]="Sentença aceita.";
                     continua=false;
                  }
                  else {
                     proc->Cells[3][i]="Sentença recusada.";
                     continua=false;
                  }
               }
            }
         }
      }
/*      if (tvp == tva) {
         proc->Cells[2][i]="Desempilha e lê símbolo.";
         pilha=pilha.SubString(1,pilha.Length()-tvp.Length());
         analise=analise.SubString(tva.Length()+1,analise.Length()-tva.Length());
      }
      if (fvp != "") {
         int r,w;
         for (r=1;r<tabela->RowCount;r++) {
            if (tabela->Cells[0][r] == fvp) {
               break;
            }
         }
         for (w=1;w<=tabela->ColCount;w++) {
//            ShowMessage("Busca por: "+tva);
            if (tabela->Cells[w][0] == tva) {
               break;
            }
         }
         AnsiString regradavez;
         regradavez=tabela->Cells[w][r];
         if (regradavez == "") {
            proc->Cells[2][i]="Sentença RECUSADA!";
            continua=false;
            break;
         }
         else {
            pilha=pilha.SubString(1,pilha.Length()-fvp.Length());
            proc->Cells[2][i]=fvp+"=>"+regradavez;
            if (regradavez != "#") {
               while (regradavez != "") {
                  AnsiString localizado;
                  localizado="";
                  for(int s=0;s<token->RowCount;s++){ //Busca por tokens
                     int tam_token,tam_regra;
                     tam_token=token->Cells[0][s].Length();
                     tam_regra=regradavez.Length();
                     if (regradavez.SubString(tam_regra-tam_token+1,tam_token) == token->Cells[0][s]) {
                        localizado=token->Cells[0][s];
                     }
                  }
                  for(int s=0;s<func->RowCount;s++){ //Busca por funcoes
                     int tam_func,tam_regra;
                     tam_func=func->Cells[0][s].Length();
                     tam_regra=regradavez.Length();
                     if (regradavez.SubString(tam_regra-tam_func+1,tam_func) == func->Cells[0][s]) {
                        localizado=func->Cells[0][s];
                     }
                  }
                  if (localizado == "") {
                     continua=false;
                     break;
                  }
                  else {
                     regradavez=regradavez.SubString(1,regradavez.Length()-localizado.Length());
                     pilha=pilha+localizado;
                  }
               }
            }
         }
      }
   }*/
}
//---------------------------------------------------------------------------
void __fastcall TForm1::tokenDblClick(TObject *Sender)
{
   exp->Text=exp->Text+token->Cells[0][token->Row];
}
//---------------------------------------------------------------------------
void __fastcall TForm1::funcDblClick(TObject *Sender)
{
   msgp->Caption="Inicio da pilha: "+func->Cells[0][func->Row];
   pilha="$"+func->Cells[0][func->Row];
}
//---------------------------------------------------------------------------



void __fastcall TForm1::tabelaSetEditText(TObject *Sender, int ACol,
      int ARow, const AnsiString Value)
{
   AnsiString preenchimento;
   preenchimento=tabela->Cells[tabela->Col][tabela->Row];
   if ((preenchimento != ">") && (preenchimento != "<") && (preenchimento != "=") && (preenchimento != aceito->Text) && (preenchimento != "")) {
      ShowMessage("Voce preencheu: "+preenchimento+"\nEste caractere não é válido como relacional!");
      tabela->Cells[tabela->Col][tabela->Row]="";
   }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::aceitoChange(TObject *Sender)
{
   tabela->Visible=false;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::tokenSetEditText(TObject *Sender, int ACol,
      int ARow, const AnsiString Value)
{
   tabela->Visible=false;
}
//---------------------------------------------------------------------------

